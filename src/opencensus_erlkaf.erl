-module(opencensus_erlkaf).

-export([stats_callback/2,
         delivery_report/2,

         register_measures/0,
         default_views/0]).

-include_lib("erlkaf/include/erlkaf.hrl").

%% Based on the stats found here:
%% https://github.com/postmates/pmpy/blob/master/pmpy/kafka/stats.py
%% which uses broker as a label but not sure it makes sense
-define(TOPIC_TAGS, [type, topic]). %% broker
-define(PARTITION_TAGS, [partition, leader_broker_id, fetch_state | ?TOPIC_TAGS]).

-spec stats_callback(client_id(), map()) -> ok.
stats_callback(_ClientId, #{<<"type">> := Type,
                            <<"topics">> := Topics}) ->
    maps:map(fun(Topic, #{<<"batchsize">> :=
                              #{<<"min">> := SizeMin,
                                <<"max">> := SizeMax,
                                <<"avg">> := SizeAvg,
                                <<"sum">> := SizeSum,
                                <<"cnt">> := SizeCnt,
                                <<"stddev">> := SizeStdDev,
                                <<"p50">> := SizeP50,
                                <<"p75">> := SizeP75,
                                <<"p90">> := SizeP90,
                                <<"p99">> := SizeP99,
                                <<"p99_99">> := SizeP99_99},
                          <<"batchcnt">> :=
                              #{<<"min">> := CntMin,
                                <<"max">> := CntMax,
                                <<"avg">> := CntAvg,
                                <<"sum">> := CntSum,
                                <<"cnt">> := CntCnt,
                                <<"stddev">> := CntStdDev,
                                <<"p50">> := CntP50,
                                <<"p75">> := CntP75,
                                <<"p90">> := CntP90,
                                <<"p99">> := CntP99,
                                <<"p99_99">> := CntP99_99},
                         <<"partitions">> := Partitions}) ->
                 oc_stat:record(#{type => Type, topic => Topic},
                                [{'kafka/topic/batchsize/min', SizeMin},
                                 {'kafka/topic/batchsize/max', SizeMax},
                                 {'kafka/topic/batchsize/avg', SizeAvg},
                                 {'kafka/topic/batchsize/sum', SizeSum},
                                 {'kafka/topic/batchsize/cnt', SizeCnt},
                                 {'kafka/topic/batchsize/stddev', SizeStdDev},
                                 {'kafka/topic/batchsize/p50', SizeP50},
                                 {'kafka/topic/batchsize/p75', SizeP75},
                                 {'kafka/topic/batchsize/p90', SizeP90},
                                 {'kafka/topic/batchsize/p99', SizeP99},
                                 {'kafka/topic/batchsize/p99_99', SizeP99_99},

                                 {'kafka/topic/batchcnt/min', CntMin},
                                 {'kafka/topic/batchcnt/max', CntMax},
                                 {'kafka/topic/batchcnt/avg', CntAvg},
                                 {'kafka/topic/batchcnt/sum', CntSum},
                                 {'kafka/topic/batchcnt/cnt', CntCnt},
                                 {'kafka/topic/batchcnt/stddev', CntStdDev},
                                 {'kafka/topic/batchcnt/p50', CntP50},
                                 {'kafka/topic/batchcnt/p75', CntP75},
                                 {'kafka/topic/batchcnt/p90', CntP90},
                                 {'kafka/topic/batchcnt/p99', CntP99},
                                 {'kafka/topic/batchcnt/p99_99', CntP99_99}]),
                 maps:map(fun(Partition, #{<<"leader">> := Leader,
                                           <<"fetch_state">> := FetchState,
                                           <<"fetchq_cnt">> := FetchQCnt,
                                           <<"fetchq_size">> := FetchQSize,
                                           <<"consumer_lag">> := ConsumerLag,
                                           <<"txmsgs">> := TxMsgs,
                                           <<"txbytes">> := TxBytes,
                                           <<"rxmsgs">> := RxMsgs,
                                           <<"rxbytes">> := RxBytes,
                                           <<"msgs">> := Msgs}) ->
                                  oc_stat:record(#{partition => Partition,
                                                   leader_broker_id => integer_to_binary(Leader),
                                                   fetch_state => FetchState,
                                                   type => Type,
                                                   topic => Topic},
                                                 [{'kafka/partition/fetchq_cnt', FetchQCnt},
                                                  {'kafka/partition/fetchq_size', FetchQSize},
                                                  {'kafka/partition/consumer_lag', ConsumerLag},
                                                  {'kafka/partition/txmsgs', TxMsgs},
                                                  {'kafka/partition/txbytes', TxBytes},
                                                  {'kafka/partition/rxmsgs', RxMsgs},
                                                  {'kafka/partition/rxbytes', RxBytes},
                                                  {'kafka/partition/msgs', Msgs}])
                          end, Partitions)
             end, Topics),

    ok.

-spec delivery_report(ok | {error, any()}, #erlkaf_msg{}) -> ok.
delivery_report(_DeliveryStatus, _Message) ->
    ok.

register_measures() ->
    register_measures(topics),
    register_measures(partitions).

%% topic measures
register_measures(topics) ->
    oc_stat_measure:new('kafka/topic/batchsize/min',
                        "Smallest batch size",
                        bytes),
    oc_stat_measure:new('kafka/topic/batchsize/max',
                        "Largest batch size",
                        bytes),
    oc_stat_measure:new('kafka/topic/batchsize/avg',
                        "Average batch size",
                        bytes),
    oc_stat_measure:new('kafka/topic/batchsize/sum',
                        "Sum of batch sizes",
                        bytes),
    oc_stat_measure:new('kafka/topic/batchsize/cnt',
                        "Number of batch sizes sampled",
                        none),
    oc_stat_measure:new('kafka/topic/batchsize/stddev',
                        "Standard deviation of batch sizes",
                        bytes),
    oc_stat_measure:new('kafka/topic/batchsize/p50',
                        "Batch size 50th percentile",
                        bytes),
    oc_stat_measure:new('kafka/topic/batchsize/p75',
                        "Batch size 75th percentile",
                        bytes),
    oc_stat_measure:new('kafka/topic/batchsize/p90',
                        "Batch size 90th percentile",
                        bytes),
    oc_stat_measure:new('kafka/topic/batchsize/p99',
                        "Batch size 99th percentile",
                        bytes),
    oc_stat_measure:new('kafka/topic/batchsize/p99_99',
                        "Batch size 99.99th percentile",
                        bytes),
    oc_stat_measure:new('kafka/topic/batchcnt/min',
                        "Smallest batch message count",
                        bytes),
    oc_stat_measure:new('kafka/topic/batchcnt/max',
                        "Largest batch message count",
                        bytes),
    oc_stat_measure:new('kafka/topic/batchcnt/avg',
                        "Average batch message count",
                        bytes),
    oc_stat_measure:new('kafka/topic/batchcnt/sum',
                        "Sum of batch message counts",
                        bytes),
    oc_stat_measure:new('kafka/topic/batchcnt/cnt',
                        "Number of batch message counts sampled",
                        none),
    oc_stat_measure:new('kafka/topic/batchcnt/stddev',
                        "Standard deviation of batch message counts",
                        bytes),
    oc_stat_measure:new('kafka/topic/batchcnt/p50',
                        "batch message count 50th percentile",
                        bytes),
    oc_stat_measure:new('kafka/topic/batchcnt/p75',
                        "batch message count 75th percentile",
                        bytes),
    oc_stat_measure:new('kafka/topic/batchcnt/p90',
                        "batch message count 90th percentile",
                        bytes),
    oc_stat_measure:new('kafka/topic/batchcnt/p99',
                        "batch message count 99th percentile",
                        bytes),
    oc_stat_measure:new('kafka/topic/batchcnt/p99_99',
                        "batch message count 99.99th percentile",
                        bytes);

%% partition measures
register_measures(partitions) ->
    oc_stat_measure:new('kafka/partition/fetchq_cnt',
                        "Number of pre-fetched messages in fetch queue",
                        none),
    oc_stat_measure:new('kafka/partition/fetchq_size',
                        "Bytes in fetchq",
                        bytes),
    oc_stat_measure:new('kafka/partition/consumer_lag',
                        "Difference between hi_offset - max(app_offset, committed_offset",
                        none),
    oc_stat_measure:new('kafka/partition/txmsgs',
                        "Total number of messages transmitted (produced)",
                        bytes),
    oc_stat_measure:new('kafka/partition/txbytes',
                        "Total number of bytes transmitted for txmsgs",
                        bytes),
    oc_stat_measure:new('kafka/partition/rxmsgs',
                        "Total number of messages consumed, not including "
                        "ignored messages (due to offset, etc).",
                        none),
    oc_stat_measure:new('kafka/partition/rxbytes',
                        "Total number of bytes received for rxmsgs",
                        bytes),
    oc_stat_measure:new('kafka/partition/msgs',
                        "Total number of messages received (consumer, same as rxmsgs), "
                        "or total number of messages produced (possibly not yet transmitted) (producer).",
                        none).


default_views() ->
    [#{name => "kafka/topic/batchsize/min",
       description => "Smallest batch size value",
       tags => ?TOPIC_TAGS,
       measure => 'kafka/topic/batchsize/min',
       aggregation => oc_stat_aggregation_latest},
    #{name => "kafka/topic/batchsize/max",
      description => "Largest batch size",
       tags => ?TOPIC_TAGS,
       measure => 'kafka/topic/batchsize/max',
       aggregation => oc_stat_aggregation_latest},
    #{name => "kafka/topic/batchsize/avg",
      description => "Average batch size",
       tags => ?TOPIC_TAGS,
       measure => 'kafka/topic/batchsize/avg',
       aggregation => oc_stat_aggregation_latest},
    #{name => "kafka/topic/batchsize/sum",
      description => "Sum of batch sizes",
       tags => ?TOPIC_TAGS,
       measure => 'kafka/topic/batchsize/sum',
       aggregation => oc_stat_aggregation_latest},
    #{name => "kafka/topic/batchsize/cnt",
      description => "Number of batch sizes sampled",
       tags => ?TOPIC_TAGS,
       measure => 'kafka/topic/batchsize/cnt',
       aggregation => oc_stat_aggregation_latest},
    #{name => "kafka/topic/batchsize/stddev",
      description => "Standard deviation of batch sizes",
       tags => ?TOPIC_TAGS,
       measure => 'kafka/topic/batchsize/stddev',
       aggregation => oc_stat_aggregation_latest},
    #{name => "kafka/topic/batchsize/p50",
      description => "Batch size 50th percentile",
       tags => ?TOPIC_TAGS,
       measure => 'kafka/topic/batchsize/p50',
       aggregation => oc_stat_aggregation_latest},
    #{name => "kafka/topic/batchsize/p75",
      description => "Batch size 75th percentile",
       tags => ?TOPIC_TAGS,
       measure => 'kafka/topic/batchsize/p75',
       aggregation => oc_stat_aggregation_latest},
    #{name => "kafka/topic/batchsize/p90",
      description => "Batch size 90th percentile",
       tags => ?TOPIC_TAGS,
       measure => 'kafka/topic/batchsize/p90',
       aggregation => oc_stat_aggregation_latest},
    #{name => "kafka/topic/batchsize/p99",
      description => "Batch size 99th percentile",
       tags => ?TOPIC_TAGS,
       measure => 'kafka/topic/batchsize/p99',
       aggregation => oc_stat_aggregation_latest},
    #{name => "kafka/topic/batchsize/p99_99",
      description => "Batch size 99.99th percentile",
       tags => ?TOPIC_TAGS,
       measure => 'kafka/topic/batchsize/p99_99',
       aggregation => oc_stat_aggregation_latest},

     #{name => "kafka/topic/batchcnt/min",
       description => "Smallest batch message count value",
       tags => ?TOPIC_TAGS,
       measure => 'kafka/topic/batchcnt/min',
       aggregation => oc_stat_aggregation_latest},
    #{name => "kafka/topic/batchcnt/max",
      description => "Largest batch message count",
       tags => ?TOPIC_TAGS,
       measure => 'kafka/topic/batchcnt/max',
       aggregation => oc_stat_aggregation_latest},
    #{name => "kafka/topic/batchcnt/avg",
      description => "Average batch message count",
       tags => ?TOPIC_TAGS,
       measure => 'kafka/topic/batchcnt/avg',
       aggregation => oc_stat_aggregation_latest},
    #{name => "kafka/topic/batchcnt/sum",
      description => "Sum of batch message counts",
       tags => ?TOPIC_TAGS,
       measure => 'kafka/topic/batchcnt/sum',
       aggregation => oc_stat_aggregation_latest},
    #{name => "kafka/topic/batchcnt/cnt",
      description => "Number of batch message counts sampled",
       tags => ?TOPIC_TAGS,
       measure => 'kafka/topic/batchcnt/cnt',
       aggregation => oc_stat_aggregation_latest},
    #{name => "kafka/topic/batchcnt/stddev",
      description => "Standard deviation of batch message counts",
       tags => ?TOPIC_TAGS,
       measure => 'kafka/topic/batchcnt/stddev',
       aggregation => oc_stat_aggregation_latest},
    #{name => "kafka/topic/batchcnt/p50",
      description => "batch message count 50th percentile",
       tags => ?TOPIC_TAGS,
       measure => 'kafka/topic/batchcnt/p50',
       aggregation => oc_stat_aggregation_latest},
    #{name => "kafka/topic/batchcnt/p75",
      description => "batch message count 75th percentile",
       tags => ?TOPIC_TAGS,
       measure => 'kafka/topic/batchcnt/p75',
       aggregation => oc_stat_aggregation_latest},
    #{name => "kafka/topic/batchcnt/p90",
      description => "batch message count 90th percentile",
       tags => ?TOPIC_TAGS,
       measure => 'kafka/topic/batchcnt/p90',
       aggregation => oc_stat_aggregation_latest},
    #{name => "kafka/topic/batchcnt/p99",
      description => "batch message count 99th percentile",
       tags => ?TOPIC_TAGS,
       measure => 'kafka/topic/batchcnt/p99',
       aggregation => oc_stat_aggregation_latest},
    #{name => "kafka/topic/batchcnt/p99_99",
      description => "batch message count 99.99th percentile",
       tags => ?TOPIC_TAGS,
       measure => 'kafka/topic/batchcnt/p99_99',
       aggregation => oc_stat_aggregation_latest},
     #{name => "kafka/partition/fetchq_cnt",
       description => "Number of pre-fetched messages in fetch queue",
       tags => ?PARTITION_TAGS,
       measure => 'kafka/partition/fetchq_cnt',
       aggregation => oc_stat_aggregation_latest},
     #{name => "kafka/partition/fetchq_size",
       description => "Bytes in fetchq",
       tags => ?PARTITION_TAGS,
       measure => 'kafka/partition/fetchq_size',
       aggregation => oc_stat_aggregation_latest},
     #{name => "kafka/partition/consumer_lag",
       description => "Difference between hi_offset - max(app_offset, committed_offset",
       tags => ?PARTITION_TAGS,
       measure => 'kafka/partition/consumer_lag',
       aggregation => oc_stat_aggregation_latest},
     #{name => "kafka/partition/txmsgs",
       description => "Total number of messages transmitted (produced)",
       tags => ?PARTITION_TAGS,
       measure => 'kafka/partition/txmsgs',
       aggregation => oc_stat_aggregation_latest},
     #{name => "kafka/partition/txbytes",
       description => "Total number of bytes transmitted for txmsgs",
       tags => ?PARTITION_TAGS,
       measure => 'kafka/partition/txbytes',
       aggregation => oc_stat_aggregation_latest},
     #{name => "kafka/partition/rxmsgs",
       description => "Total number of messages consumed, not including ignored messages (due to offset, etc).",
       tags => ?PARTITION_TAGS,
       measure => 'kafka/partition/rxmsgs',
       aggregation => oc_stat_aggregation_latest},
     #{name => "kafka/partition/rxbytes",
       description => "Total number of bytes received for rxmsgs",
       tags => ?PARTITION_TAGS,
       measure => 'kafka/partition/rxbytes',
       aggregation => oc_stat_aggregation_latest},
     #{name => "kafka/partition/msgs",
       description => "Total number of messages received (consumer, same as rxmsgs}, or total number of messages produced (possibly not yet transmitted) (producer).",
       tags => ?PARTITION_TAGS,
       measure => 'kafka/partition/msgs',
       aggregation => oc_stat_aggregation_latest}].
